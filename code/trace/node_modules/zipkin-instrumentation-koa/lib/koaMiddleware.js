"use strict";

var _require = require('zipkin'),
    _require$option = _require.option,
    Some = _require$option.Some,
    None = _require$option.None,
    Instrumentation = _require.Instrumentation;
/**
 * @typedef {Object} MiddlewareOptions
 * @property {Object} tracer
 * @property {string} serviceName
 * @property {number} port
 */

/**
 * @param {MiddlewareOptions}
 * @return {ZipkinKoaMiddleware}
 */


module.exports = function koaMiddleware(_ref) {
  var tracer = _ref.tracer,
      serviceName = _ref.serviceName,
      _ref$port = _ref.port,
      port = _ref$port === void 0 ? 0 : _ref$port;
  var instrumentation = new Instrumentation.HttpServer({
    tracer: tracer,
    serviceName: serviceName,
    port: port
  });
  /**
   * @method
   * @typedef {function} ZipkinKoaMiddleware
   * @param {Object} ctx
   * @param {function()} next
   */

  return function zipkinKoaMiddleware(ctx, next) {
    function readHeader(header) {
      var val = ctx.request.headers[header.toLowerCase()];

      if (val != null) {
        return new Some(val);
      } else {
        return None;
      }
    }

    return tracer.scoped(function () {
      var method = ctx.request.method.toUpperCase();
      var id = instrumentation.recordRequest(method, ctx.request.href, readHeader);
      Object.defineProperty(ctx.request, '_trace_id', {
        configurable: false,
        get: function get() {
          return id;
        }
      });

      var recordResponse = function recordResponse() {
        tracer.letId(id, function () {
          // support koa-route and koa-router
          var matchedPath = ctx.routePath || ctx._matchedRoute;
          tracer.recordRpc(instrumentation.spanNameFromRoute(method, matchedPath, ctx.status));
          instrumentation.recordResponse(id, ctx.status);
        });
      };

      return next().then(recordResponse)["catch"](recordResponse);
    });
  };
};